// 매개변수 primitive는 원시 값을 전달받고, 매개변수는 obj는 객체를 전달 받는다.
function changeVal(primitive, obj) {
    primitive += 100;
    obj.name = 'Kim';
}

// 외부 상태
var num = 100;
var person = { name: 'Lee' };

console.log(num);
console.log(person);

// 원시 값은 값 자체가 복사되어 전달되고 객체는 참조 값이 복사되어 전달된다.
changeVal(num, person);

// 원사 값은 원본이 훼손되지 않는다.
console.log(num);   // 100

// 객체는 원본이 훼손된다.
console.log(person);    // {name: "Kim"}

// changeVal 함수는 매개변수를 통해 전달받은 원시 타입 인수와 객체 타입 인수를 함수 몸체에서 변경한다.
// 더 엄밀히 말하면, 원시 타입 인수를 전달받은 매개변수 primitive의 경우, 원시 값은 변경 불가능한 값이므로 직접 변경할 수 없기 때문에 
// 재할당을 통해 할당된 원시값을 새로운 원시 값으로 교체했고, 객체 타입 인수를 전달받은 매개변수 obj의 경우, 객체는 변경 가능한 값이므로 직접 변경할 수 있기 때문에
// 재할당 없이 직접 할당된 객체를 변경했다.

// 객체가 함수 몸체에서 참조값을 통해 객체를 변경할 경우 원본이 훼손
// 이러한 문제의 해결 방법 중 하나는 객체를 불변 객체로 만들어 사용하는 것.
// 객체의 상태 변경이 필요한 경우에는 객체의 방어적 복사를 통해 원본 객체를 완전히 복제, 즉 깊은 복사를 통해 객체를 생성하고 재할당을 통해 교체.
// 이를 통해 외부 상태가 변경되는 부수 효과를 없앨 수 있다.
// 외부 상태를 변경하지 않고, 외부 상태에 의존하지도 않는 함수를 순수 함수라 한다.
// 순수 함수를 통해 부수 효과를 최대한 억제하여 오류를 피하고 프로그램의 안정성을 높이는 프로그래밍 패러다임을 함수형 프로그래밍이라 한다.
