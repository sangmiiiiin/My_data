// 외부에서 전달받은 f를 n만큼 반복 호출한다.
function repeat(n, f) {                         // => 고차함수
    for(var i = 0; i < n; i++) {
        f(i);   // i를 전달하면서 f를 호출           
    }
}

var logAll = function (i) {                     // => 콜백함수
    console.log(i);
};

// 반복 호출할 함수를 인수로 전달한다.
repeat(5, logAll);  // 0, 1, 2, 3, 4

var logOdds = function (i) {
    if(i % 2) console.log(i);
};

// 반복 호출할 함수를 인수로 전달 한다.

repeat(5, logOdds); // 1, 3


// 위 repeat 함수는 경우에 따라 변경되는 일을 함수로 f로 추상화했고 이를 외부에서 전달받는다.
// 함수의 매개변수를 통해 함수를 전달할 수 있다.
// repeat 함수는 내부 로직에 강력하게 의존하지 않고 로직의 일부분을 함수로 전달받아 수행하므로 유연한 구조를 갖게됨!!!

// 이처럼 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 콜백 함수 라고하며, 매개변수를 통해 함수 외부에서 콜백 함수를 전달 받은 함수를 고차 함수 라고한다


// 익명 함수 리터럴은 콜백 함수로 고차 함수에 전달한다.
// 익명 함수 리터럴은 repeat 함수를 호출할 때마다 평가되어 함수 객체를 생성한다.

// [예제 12-52]
repeat(5, function (i) {
    if (i % 2) console.log(i);
}); // 1 3

// 내가 이해한것: outer를 고차함수, inner를 콜백함수

// [예제 12-53]
// logOdds 함수는 단 한 번만 생성된다.
var logOdds = function (i) {
    if (i % 2) console.log(i);
};

// 고차 함수에 함수 참조를 전달한다.
repeat(5, logOdds); // 1 3


// 콜백 함수는 함수형 프로그래밍 패러다임 뿐만 아니라 비동기 처리 (이벤트 처리, Ajax 통신, 타이머 함수 등)에 활용되는 중요한 패턴이다.